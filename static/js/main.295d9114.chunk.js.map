{"version":3,"sources":["BooksAPI.js","Book.js","BookListPage.js","SearchBookPage.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","update","book","shelf","fetch","concat","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","then","res","json","search","query","data","books","Book","this","props","ChangeShelf","console","log","react_default","a","createElement","className","style","width","height","backgroundImage","undefined","imageLinks","smallThumbnail","value","bookShelf","onChange","event","disabled","title","authors","Component","BookListPage","filter","map","key","src_Book","Link","to","SeachBookPage","state","searchResult","updateQuery","_this","setState","createSearchResultArray","BooksAPI","searchedBooks","constructor","Array","catch","err","_React$createElement","_this2","MainPageBooks","type","placeholder","defineProperty","target","foundBook","MainPageBook","BooksApp","componentDidMount","BooklistArray","_this3","Route","path","render","SearchBookPage","exact","src_BookListPage","React","ReactDOM","BrowserRouter","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.295d9114.chunk.js","sourcesContent":["\r\nconst api = \"https://reactnd-books-api.udacity.com\"\r\n\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Authorization': token\r\n}\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.book)\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.books)\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ shelf })\r\n  }).then(res => res.json())\r\n\r\nexport const search = (query) =>\r\n  fetch(`${api}/search`, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ query })\r\n  }).then(res => res.json())\r\n    .then(data => data.books)\r\n","import React, { Component } from 'react'\r\n\r\nclass Book extends Component {\r\n    \r\n    render() {\r\n        const { book } = this.props;\r\n        // change shelf function\r\n        const { ChangeShelf } = this.props\r\n\r\n        // check if thumbnail exist \r\n        let showSmallThumbnail = () => {\r\n            if (book.imageLinks !== undefined) {\r\n                return book.imageLinks.smallThumbnail;\r\n            } else {\r\n               return  '';\r\n            }\r\n        }\r\n        \r\n        console.log(this.props);\r\n        return (\r\n            <div className=\"book\">\r\n                <div className=\"book-top\">\r\n                    <div className=\"book-cover\" style={{ width: 128, height: 193, backgroundImage: `url(${showSmallThumbnail()})` }}></div>\r\n                    <div className=\"book-shelf-changer\">\r\n                        {/* default value from this.props.book.shelf } */}\r\n\r\n                        \r\n                        <select value={this.props.bookShelf } onChange={(event) => ChangeShelf(book, event)}>\r\n                            <option value=\"move\" disabled>Move to...</option>\r\n                            <option value=\"currentlyReading\">Currently Reading</option>\r\n                            <option value=\"wantToRead\">Want to Read</option>\r\n                            <option value=\"read\">Read</option>\r\n                            <option value=\"none\">None</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n                <div className=\"book-title\"> {book.title}</div>\r\n                <div className=\"book-authors\">{book.authors}</div>\r\n            </div>\r\n         )\r\n    }\r\n}\r\n\r\nexport default Book","import React, { Component } from 'react'\r\nimport Book from './Book';\r\nimport { Link } from 'react-router-dom'\r\n\r\nclass BookListPage extends Component {\r\n    render() {\r\n        const { books } = this.props;\r\n        const {ChangeShelf} = this.props;\r\n\r\n        return (\r\n            <div className=\"list-books\">\r\n            <div className=\"list-books-title\">\r\n              <h1>MyReads</h1>\r\n            </div>\r\n            <div className=\"list-books-content\">\r\n              <div>\r\n                <div className=\"bookshelf\">\r\n                  <h2 className=\"bookshelf-title\">Currently Reading</h2>\r\n                  <div className=\"bookshelf-books\">\r\n                    <ol className=\"books-grid\">\r\n                      \r\n                      {books\r\n                        .filter(book => book.shelf === 'currentlyReading')\r\n                        .map(\r\n                            book => (\r\n                                <li key={book.id}>\r\n                                    <Book \r\n                                    book={book}\r\n                                    ChangeShelf={ChangeShelf}\r\n                                    bookShelf={book.shelf}\r\n                                    />\r\n                                </li>\r\n                            )\r\n                        )\r\n                        }\r\n                    </ol>\r\n                  </div>\r\n                </div>\r\n                <div className=\"bookshelf\">\r\n                  <h2 className=\"bookshelf-title\">Want to Read</h2>\r\n                  <div className=\"bookshelf-books\">\r\n                    <ol className=\"books-grid\">\r\n                      {books\r\n                        .filter(book => book.shelf === 'wantToRead')\r\n                        .map(\r\n                            book => (\r\n                                <li key={book.id}>\r\n                                    <Book \r\n                                    book={book}\r\n                                    // passing method from from app.js to book.js\r\n                                    ChangeShelf={ChangeShelf}\r\n                                    bookShelf={book.shelf}\r\n                                    />\r\n                                </li>\r\n                            )\r\n                        )\r\n                        }\r\n                    </ol>\r\n                  </div>\r\n                </div>\r\n                <div className=\"bookshelf\">\r\n                  <h2 className=\"bookshelf-title\">Read</h2>\r\n                  <div className=\"bookshelf-books\">\r\n                    <ol className=\"books-grid\">\r\n                        {books\r\n                            .filter(book => book.shelf === 'read')\r\n                            .map(\r\n                                book => (\r\n                                    <li key={book.id}>\r\n                                        <Book \r\n                                        book={book}\r\n                                        ChangeShelf={ChangeShelf}\r\n                                        bookShelf={book.shelf}\r\n                                        />\r\n                                    </li>\r\n                                )\r\n                            )\r\n                        }\r\n                    </ol>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"open-search\">\r\n                <Link to=\"/search\" >\r\n                    <button>Add a book</button>\r\n                </Link>\r\n            </div>\r\n          </div>\r\n        )}\r\n      \r\n}\r\n\r\nexport default BookListPage;","import React, { Component } from 'react'\r\nimport escapeRegExp from 'escape-string-regexp'\r\nimport sortBy from 'sort-by'\r\nimport * as BooksAPI from './BooksAPI'\r\nimport Book from './Book';\r\nimport { Link } from 'react-router-dom'\r\n\r\nclass SeachBookPage extends Component {\r\n    state = {\r\n        query: '' ,\r\n        searchResult: []\r\n    }    \r\n    // method update query state on every input event\r\n    updateQuery = (query) => {\r\n        // add typing query into state.query\r\n        this.setState({ query: query})\r\n        \r\n        // create search list of search books as array and add it into state.searchResult\r\n        if (query !== null ||  query!=='undefined') {\r\n        this.createSearchResultArray(query);\r\n        }\r\n        else {\r\n            this.setState({searchResult: []})\r\n        }\r\n    }\r\n\r\n    createSearchResultArray = (query) => {\r\n            if (query) {\r\n            BooksAPI.search(query).then((searchedBooks) => {\r\n                // need to check if searchBooks are array because it need to be use by map method later\r\n                    if (searchedBooks.constructor === Array) {\r\n                        this.setState({searchResult: searchedBooks})\r\n                } else\r\n                {\r\n                    // because match of any books hasn't been found we need to set SearchResulat as empty array to avoid error with map function later\r\n                    this.setState({searchResult: []});\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                console.log(\"[BookAPI.search() error]: \" + err);\r\n                \r\n            })\r\n            } else {\r\n            this.setState({searchResult: []})\r\n        }\r\n    }\r\n\r\n    render() {\r\n       const {searchResult} = this.state\r\n       const {ChangeShelf} = this.props;\r\n       const {MainPageBooks} = this.props;\r\n\r\n       if (searchResult.constructor === Array) {\r\n           console.log(`[Search Result is array]`);\r\n       } else {\r\n        console.log(`[Search Result isnt array]`);\r\n        this.setState({searchResult: []});\r\n       }\r\n       \r\n        return (\r\n            <div className=\"search-books\">\r\n                <div className=\"search-books-bar\">\r\n                <Link to=\"/\" >\r\n                    <button className=\"close-search\">Close</button>\r\n                </Link>\r\n                    <div className=\"search-books-input-wrapper\">\r\n                    \r\n                    <input type=\"text\"\r\n                     placeholder=\"Search by title or author\"\r\n                     type=\"text\"\r\n                     value={this.state.query}\r\n\r\n                     // invoke updateQuery on each key press\r\n                     onChange={(event)=> this.updateQuery(event.target.value)}\r\n                     />\r\n                    \r\n                    </div>\r\n                </div>\r\n                <div className=\"search-books-results\">\r\n                    <ol className=\"books-grid\">\r\n                    {\r\n                            // map search result \r\n                            searchResult.map(foundBook => {\r\n                                \r\n                                // searchbook array don't have shelf value so we setting beging value as 'none'\r\n                                let bookShelf = \"none\";\r\n\r\n                                // check is search book with the same id is on mainPage if yes mainpage shelf will be assign to shelf value\r\n                                MainPageBooks\r\n                                .filter(MainPageBook => (MainPageBook.id === foundBook.id))\r\n                                .map(MainPageBook => (bookShelf = MainPageBook.shelf))\r\n                               \r\n                                return (\r\n                                    <li key={foundBook.id}>\r\n                                    <Book\r\n                                        book={foundBook}\r\n                                        ChangeShelf={ChangeShelf}\r\n                                        bookShelf={bookShelf}\r\n                                         \r\n                                    />\r\n                                    </li>\r\n                                )                              \r\n                             } \r\n                              )\r\n\r\n                    }\r\n                   \r\n                    </ol>\r\n                </div>\r\n          </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SeachBookPage;","import React from 'react'\r\nimport * as BooksAPI from './BooksAPI'\r\nimport './App.css'\r\nimport BookListPage from './BookListPage';\r\nimport SearchBookPage from './SearchBookPage'\r\nimport { Route } from 'react-router-dom'\r\n\r\nclass BooksApp extends React.Component {\r\n  state = {\r\n    books: []\r\n  }\r\n\r\n  // copy booklist as array from BookAPI and pass it into state.books\r\n  componentDidMount() {\r\n    BooksAPI.getAll().then(\r\n      BooklistArray => this.setState({\r\n        books: BooklistArray\r\n      })\r\n    )\r\n  }\r\n  \r\n\r\n  ChangeShelf = (book, event) =>  {\r\n  \r\n   //values inside book components\r\n   let value = event.target.value;\r\n\r\n   // update(book, shelf)\r\n   // * book: `<Object>` containing at minimum an `id` attribute\r\n   // * shelf: `<String>` contains one of [\"wantToRead\", \"currentlyReading\", \"read\"]  \r\n\r\n   // when books are updated page will copy books again and refresh page\r\n   BooksAPI.update(book, value).then(()=>this.componentDidMount())\r\n   \r\n  }\r\n\r\n\r\n  render() {\r\n    \r\n    return (\r\n      <div className=\"app\">\r\n        <Route path=\"/search\"  render={() => (\r\n            <SearchBookPage \r\n            ChangeShelf={this.ChangeShelf}\r\n            MainPageBooks={this.state.books}\r\n           />\r\n        )}\r\n        />\r\n        \r\n        <Route path=\"/\" exact render = {() => (\r\n          <BookListPage \r\n          books={this.state.books}\r\n          ChangeShelf={this.ChangeShelf}\r\n          />\r\n          )} \r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BooksApp","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport App from './App'\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n    <BrowserRouter><App /></BrowserRouter>,\r\n    document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}